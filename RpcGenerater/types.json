{
  "type_map":
    [
      {
        "type_name" : "block_id_type",
        "cpp_return_type" : "thinkyoung::blockchain::BlockIdType",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
	  {
		"type_name" : "delegate_salarys",
        "cpp_return_type" : "thinkyoung::blockchain::DelegatePaySalary",
        "cpp_include_file" : "blockchain/AccountEntry.hpp"
	  },
      {
        "type_name" : "blockchain_security_state",
        "cpp_return_type" : "thinkyoung::blockchain::BlockchainSecurityState",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
      {
         "type_name" : "asset_permission",
         "cpp_return_type" : "asset_permissions"
      },
      {
         "type_name" : "asset_permission_array",
         "cpp_return_type" : "std::vector<thinkyoung::blockchain::AssetPermissions>"
      },
      {
        "type_name": "float",
        "cpp_return_type" : "float",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
	  {
		"type_name" : "information",
        "cpp_return_type" : "thinkyoung::blockchain::Imessage",
        "cpp_include_file" : "blockchain/Types.hpp"
	  },
	  {
		"type_name" : "path",
        "cpp_return_type" : "thinkyoung::blockchain::FilePath",
        "cpp_include_file" : "blockchain/Types.hpp"
	  },
      {
        "type_name" : "account_name",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "string",
        "default_example" : "Bob"
      },
      {
        "type_name" : "account_name_array",
        "container_type": "array",
        "contained_type": "account_name"
      },
      {
        "type_name" : "new_account_name",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "string",
        "default_example" : "Carol"
      },
      {
         "type_name" : "balance_entry",
         "cpp_return_type" : "thinkyoung::blockchain::BalanceEntry"
      },
      {
         "type_name" : "balance_entry_map",
         "cpp_return_type" : "std::unordered_map<thinkyoung::blockchain::BalanceIdType, thinkyoung::blockchain::BalanceEntry>"
      },
      {
         "type_name" : "balance_entry_list",
         "cpp_return_type" : "std::vector<thinkyoung::blockchain::BalanceEntry>"
      },
      {
        "type_name" : "snapshot_map",
        "cpp_return_type" : "std::map<std::string, thinkyoung::blockchain::ShareType>",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
      {
         "type_name" : "price_map",
         "cpp_return_type" : "std::map<std::string,double>"
      },
      {
         "type_name" : "wallet_balance_entry",
         "cpp_return_type" : "thinkyoung::wallet::WalletBalanceEntry"
      },
      {
         "type_name" : "escrow_summary",
         "cpp_return_type" : "thinkyoung::wallet::EscrowSummary"
      },
      {
        "type_name" : "escrow_summary_array",
        "container_type" : "array",
        "contained_type" : "escrow_summary",
        "default_example" : "TODO"
      },
      {
        "type_name" : "account_entry",
        "cpp_return_type" : "thinkyoung::blockchain::AccountEntry",
        "cpp_include_file" : "blockchain/Types.hpp",
        "default_example" : "TODO"
      },
      {
        "type_name" : "account_entry_array",
        "container_type" : "array",
        "contained_type" : "account_entry",
        "default_example" : "TODO"
      },
      {
        "type_name" : "optional_account_entry",
        "cpp_return_type" : "fc::optional<thinkyoung::blockchain::AccountEntry>",
        "cpp_include_file" : "blockchain/Types.hpp",
        "default_example" : "TODO"
      },
      {
        "type_name" : "signed_transactions",
        "cpp_return_type" : "thinkyoung::blockchain::SignedTransactions",
        "default_example" : "TODO"
      },
      {
        "type_name" : "string",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "string",
        "default_example" : "wallet_transfer"
      },
      {
        "type_name" : "method_name",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "string",
        "default_example" : "wallet_transfer"
      },
      {
        "type_name" : "ip_endpoint",
        "cpp_return_type" : "fc::ip::endpoint",
        "cpp_include_file" : "fc/network/ip.hpp",
        "to_variant_function" : "thinkyoung::api::fc_ip_endpoint_to_variant",
        "from_variant_function" : "thinkyoung::api::variant_to_fc_ip_endpoint",
        "default_example" : "192.168.1.5:5678"
      },
      {
        "type_name" : "optional_string",
        "cpp_return_type" : "fc::optional<std::string>"
      },
      {
        "type_name" : "optional_double",
        "cpp_return_type" : "fc::optional<double>"
      },
      {
        "type_name" : "optional_uint64_t",
        "cpp_return_type" : "fc::optional<uint64_t>"
      },
      {
        "type_name" : "optional_variant",
        "cpp_return_type" : "fc::optional<fc::variant>"
      },
      {
        "type_name" : "optional_variant_object",
        "cpp_return_type" : "fc::optional<fc::variant_object>"
      },
      {
        "type_name" : "variant_object",
        "cpp_return_type" : "fc::variant_object"
      },
      {
        "type_name" : "transaction_id",
        "cpp_return_type" : "thinkyoung::blockchain::TransactionIdType",
        "cpp_include_file" : "blockchain/Types.hpp",
        "default_example" : "TODO"
      },
	  {
        "type_name" : "transaction_ids",
        "cpp_return_type" : "vector<thinkyoung::blockchain::TransactionIdType>",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
      {
        "type_name" : "operation_type",
        "cpp_return_type" : "thinkyoung::blockchain::OperationTypeEnum",
        "cpp_include_file" : "blockchain/Operations.hpp"
      },
      {
        "type_name" : "message_propagation_data",
       "cpp_return_type" : "thinkyoung::net::MessagePropagationData",
        "cpp_include_file" : "net/Node.hpp",
        "default_example" : "TODO"
      },
      {
        "type_name" : "node_id",
        "cpp_return_type" : "thinkyoung::net::NodeIdType",
        "cpp_include_file" : "net/Node.hpp",
        "default_example" : "TODO"
      },
      {
        "type_name" : "node_id_list",
        "container_type" : "array",
        "contained_type" : "node_id",
        "default_example" : "TODO"
      },
      {
        "type_name" : "new_passphrase",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "string",
        "default_example" : "my_password",
        "obscure_in_log_files": true
      },
      {
        "type_name" : "passphrase",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "string",
        "default_example" : "my_password",
        "obscure_in_log_files": true
      },
      {
        "type_name" : "wallet_name",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "string",
        "default_example" : "alice"
      },
      {
        "type_name" : "variant",
        "cpp_return_type" : "fc::variant"
      },
      {
         "type_name" : "variants",
         "cpp_return_type" : "fc::variants"
      },
      {
         "type_name" : "parameter_list",
         "cpp_return_type" : "fc::variants"
      },
      {
         "type_name" : "parameters_list",
         "cpp_return_type" : "std::vector<fc::variants>"
      },
      {
         "type_name" : "burn_entrys",
         "cpp_return_type" : "std::vector<thinkyoung::blockchain::BurnEntry>"
      },
      {
        "type_name" : "wallet_name_array",
        "container_type" : "array",
        "contained_type" : "wallet_name"
      },
      {
        "type_name" : "transaction_entry",
        "cpp_return_type" : "thinkyoung::wallet::WalletTransactionEntry",
        "cpp_include_file" : "wallet/WalletEntrys.hpp"
      },
      {
        "type_name" : "transaction_entry_array",
        "container_type" : "array",
        "contained_type" : "transaction_entry"
      },
      {
        "type_name" : "optional_wallet_name",
        "cpp_return_type" : "fc::optional<std::string>",
        "cpp_include_file" : "fc/optional.hpp",
        "default_example" : "alice"
      },
      {
        "type_name" : "time_interval_in_seconds",
        "cpp_return_type" : "fc::microseconds",
        "cpp_include_file" : "fc/time.hpp",
        "to_variant_function" : "thinkyoung::api::time_interval_in_seconds_to_variant",
        "from_variant_function" : "thinkyoung::api::variant_to_time_interval_in_seconds",
        "default_example" : 300
      },
      {
        "type_name" : "wif_private_key",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "blockchain/Types.hpp",
        "default_example" : "5KV5f8Eohi7WmuxWnP4uJzh7oX9zDEYpTbHBx5jFokSEZoUWpbB",
        "obscure_in_log_files": true
      },
      {
        "type_name" : "public_key",
        "cpp_return_type" : "thinkyoung::blockchain::PublicKeyType",
        "cpp_include_file" : "blockchain/Types.hpp",
        "default_example" : "TODO"
      },
      {
        "type_name" : "public_key_summary",
        "cpp_return_type" : "thinkyoung::wallet::PublicKeySummary",
        "cpp_include_file" : "wallet/Pretty.hpp",
        "default_example" : "TODO"
      },
      {
        "type_name" : "public_key_summary_array",
        "container_type" : "array",
        "contained_type" : "public_key_summary",
        "default_example" : "TODO"
      },
      {
        "type_name" : "blockchain_transaction_entry",
        "cpp_return_type" : "thinkyoung::blockchain::TransactionEntry",
        "cpp_include_file" : "blockchain/BlockEntry.hpp",
        "default_example" : "TODO"
      },
      {
        "type_name" : "blockchain_transaction_entry_array",
        "container_type" : "array",
        "contained_type" : "blockchain_transaction_entry"
      },
      {
        "type_name" : "transaction_entry_map",
        "cpp_return_type" : "std::map<thinkyoung::blockchain::TransactionIdType, thinkyoung::blockchain::TransactionEntry>"
      },
      {
        "type_name" : "transaction_entry_pair",
        "cpp_return_type" : "std::pair<thinkyoung::blockchain::TransactionIdType, thinkyoung::blockchain::TransactionEntry>"
      },
      {
        "type_name" : "signed_transaction",
        "cpp_return_type" : "thinkyoung::blockchain::SignedTransaction",
        "cpp_include_file" : "blockchain/Transaction.hpp",
        "default_example" : "TODO"
      },
      {
        "type_name" : "signed_transaction_array",
        "container_type" : "array",
        "contained_type" : "signed_transaction",
        "default_example" : "TODO"
      },
      {
        "type_name" : "signed_transaction_pair_array",  
        "cpp_return_type" : "std::vector<std::pair<thinkyoung::blockchain::TransactionIdType, thinkyoung::blockchain::SignedTransaction>>"    
      },
      {
        "type_name" : "optional_signed_transaction",
        "cpp_return_type" : "fc::optional<thinkyoung::blockchain::SignedTransaction>",
        "cpp_include_file" : "fc/optional.hpp",
        "default_example" : "TODO"
      },
      {
        "type_name" : "share_type",
        "cpp_return_type" : "thinkyoung::blockchain::ShareType",
        "default_example" : "TODO"
      },
      {
        "type_name" : "asset",
        "cpp_return_type" : "thinkyoung::blockchain::Asset",
        "default_example" : "TODO"
      },
      {
        "type_name" : "asset_array",
        "container_type" : "array",
        "contained_type" : "asset",
        "default_example" : "TODO"
      },
      {
        "type_name" : "pretty_transaction",
        "cpp_return_type" : "thinkyoung::wallet::PrettyTransaction",
        "cpp_include_file" : "wallet/Pretty.hpp"
      },
      {
        "type_name" : "pretty_contract_transaction",
        "cpp_return_type" : "thinkyoung::wallet::PrettyContractTransaction",
        "cpp_include_file" : "wallet/Pretty.hpp"
      },
      {
        "type_name" : "pretty_transactions",
        "cpp_return_type" : "std::vector<thinkyoung::wallet::PrettyTransaction>",
        "cpp_include_file" : "wallet/Pretty.hpp"
      },
      {
        "type_name" : "experimental_transactions",
        "cpp_return_type" : "std::set<thinkyoung::wallet::PrettyTransactionExperimental>"
      },
      {
         "type_name" : "withdraw_condition_type",
         "cpp_return_type" : "thinkyoung::blockchain::WithdrawConditionTypes"
      },
      {
         "type_name" : "account_balance_summary_type",
         "cpp_return_type" : "thinkyoung::wallet::AccountBalanceSummaryType"
      },
      {
         "type_name" : "account_balance_id_summary_type",
         "cpp_return_type" : "thinkyoung::wallet::AccountBalanceIdSummaryType"
      },
      {
         "type_name" : "account_extended_balance_type",
         "cpp_return_type" : "thinkyoung::wallet::AccountExtendedBalanceType"
      },
      {
         "type_name" : "account_vesting_balance_summary_type",
         "cpp_return_type" : "thinkyoung::wallet::AccountVestingValanceSummaryType"
      },
      {
         "type_name" : "market_order",
         "cpp_return_type" : "thinkyoung::blockchain::MarketOrder"
      },
      {
         "type_name" : "market_order_array",
         "container_type" : "array",
         "contained_type" : "market_order"
      },
      {
         "type_name" : "order_id",
         "cpp_return_type" : "thinkyoung::blockchain::OrderIdType"
      },
      {
         "type_name" : "order_ids",
         "container_type" : "array",
         "contained_type" : "order_id"
      },
      {
         "type_name" : "order_description",
         "cpp_return_type" : "thinkyoung::wallet::OrderDescription",
         "cpp_include_file" : "wallet/Wallet.hpp"
      },
      {
         "type_name" : "order_descriptions",
         "container_type" : "array",
         "contained_type" : "order_description"
      },
      {
         "type_name" : "market_order_map",
         "cpp_return_type" : "std::map<thinkyoung::blockchain::OrderIdType, thinkyoung::blockchain::MarketOrder>"
      },
      {
         "type_name" : "pair<market_order_array,market_order_array>",
         "cpp_return_type" : "std::pair<std::vector<thinkyoung::blockchain::MarketOrder>,std::vector<thinkyoung::blockchain::MarketOrder>>"
      },
      {
         "type_name" : "vector<std::pair<string, wallet_transaction_entry>>",
         "cpp_return_type" : "std::vector<std::pair<std::string, thinkyoung::wallet::WalletTransactionEntry>>"
      },
      {
        "type_name" : "amount",
        "cpp_parameter_type" : "int64_t",
        "cpp_return_type" : "int64_t",
        "cpp_include_file" : "stdint.h",
        "default_example" : 10000
      },
      {
        "type_name" : "real_amount",
        "cpp_parameter_type" : "double",
        "cpp_return_type" : "double",
        "cpp_include_file" : "stdint.h",
        "default_example" : 10000
      },
      {
        "type_name" : "receive_account_name",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "string",
        "default_example" : "Bob"
      },
      {
        "type_name" : "sending_account_name",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "string",
        "default_example" : "alice"
      },
      {
        "type_name" : "asset_symbol",
        "cpp_return_type" : "std::string",
        "cpp_include_file" : "string",
        "default_example" : "XTS"
      },
      {
        "type_name" : "invoice_summary",
        "cpp_return_type" : "thinkyoung::wallet::InvoiceSummary",
        "cpp_include_file" : "wallet/Wallet.hpp",
        "default_example" : "TODO"
      },
      {
        "type_name" : "filename",
        "cpp_return_type" : "fc::path",
        "cpp_include_file" : "fc/filesystem.hpp",
        "default_example" : "some_filename.txt"
      },
      {
        "type_name" : "digest",
        "cpp_return_type" : "thinkyoung::blockchain::digest_type"
      },
      {
        "type_name" : "address",
        "cpp_return_type" : "thinkyoung::blockchain::Address",
        "cpp_include_file" : "blockchain/Address.hpp"
      },
      {
        "type_name" : "legacy_address",
        "cpp_return_type" : "thinkyoung::blockchain::PtsAddress",
        "cpp_include_file" : "blockchain/PtsAddress.hpp"
      },
      {
        "type_name" : "full_block",
        "cpp_return_type" : "thinkyoung::blockchain::FullBlock",
        "cpp_include_file" : "blockchain/Block.hpp"
      },
      {
        "type_name" : "digest_block",
        "cpp_return_type" : "thinkyoung::blockchain::DigestBlock",
        "cpp_include_file" : "blockchain/Block.hpp"
      },
      {
        "type_name" : "odigest_block",
        "cpp_return_type" : "fc::optional<thinkyoung::blockchain::DigestBlock>",
        "cpp_include_file" : "blockchain/Block.hpp"
      },
      {
        "type_name" : "account_id_type",
        "cpp_return_type" : "thinkyoung::blockchain::AccountIdType",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
      {
         "type_name" : "account_id_array",
         "container_type" : "array",
         "contained_type" : "account_id_type"
      },
      {
        "type_name" : "asset_entry",
        "cpp_return_type" : "thinkyoung::blockchain::AssetEntry",
        "cpp_include_file" : "blockchain/AssetEntry.hpp"
      },
      {
        "type_name" : "asset_entry_array",
        "container_type" : "array",
        "contained_type" : "asset_entry",
        "default_example" : "TODO"
      },
      {
        "type_name" : "optional_asset_entry",
        "cpp_return_type" : "fc::optional<thinkyoung::blockchain::AssetEntry>",
        "cpp_include_file" : "blockchain/AssetEntry.hpp"
      },
      {
        "type_name" : "asset_id_type",
        "cpp_return_type" : "thinkyoung::blockchain::AssetIdType",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
      {
        "type_name" : "wallet_account_entry",
        "cpp_return_type" : "thinkyoung::wallet::WalletAccountEntry",
        "cpp_include_file" : "wallet/WalletEntrys.hpp"
      },
      {
        "type_name" : "wallet_account_entry_array",
        "container_type" : "array",
        "contained_type" : "wallet_account_entry"
      },
      {
        "type_name" : "account_address_entry",
        "cpp_return_type" : "thinkyoung::wallet::AccountAddressData",
        "cpp_include_file" : "wallet/WalletEntrys.hpp"
      },
      {
        "type_name" : "account_address_entry_array",
        "container_type" : "array",
        "contained_type" : "account_address_entry"
      },
      {
        "type_name" : "wallet_contact_entry",
        "cpp_return_type" : "thinkyoung::wallet::WalletContactEntry"
      },
      {
        "type_name" : "owallet_contact_entry",
        "cpp_return_type" : "thinkyoung::wallet::oWalletContactEntry"
      },
      {
        "type_name" : "wallet_contact_entry_array",
        "container_type" : "array",
        "contained_type" : "wallet_contact_entry"
      },
      {
        "type_name" : "address_list",
        "container_type" : "array",
        "contained_type" : "address",
        "default_example" : "TODO"
      },
      {
          "type_name" : "size",
          "cpp_parameter_type" : "uint64_t",
          "cpp_return_type" : "uint64_t",
          "cpp_include_file" : "stdint.h",
          "default_example" : 10
      },
      {
          "type_name" : "map< address, amount >",
          "cpp_return_type" : "std::unordered_map< thinkyoung::blockchain::Address, int64_t >",
          "cpp_include_file" : "blockchain/Address.hpp"
      },
      {
          "type_name" : "name",
          "cpp_return_type" : "std::string",
          "cpp_include_file" : "string",
          "default_example" : "George"
      },
      {
          "type_name" : "brainkey",
          "cpp_return_type" : "std::string",
          "cpp_include_file" : "string",
          "default_example" : "*1+1!=2",
          "obscure_in_log_files": true
      },
      {
          "type_name" : "keyhoteeid",
          "cpp_return_type" : "std::string",
          "cpp_include_file" : "string",
          "default_example" : "Alice"
      },
      {
         "type_name" : "map< account_name, share_type >",
         "cpp_return_type" : "std::unordered_map< std::string, thinkyoung::blockchain::ShareType >"
      },
      {
         "type_name" : "block_entry",
         "cpp_return_type" : "thinkyoung::blockchain::BlockEntry"
      },
      {
         "type_name" : "oblock_entry",
         "cpp_return_type" : "fc::optional<thinkyoung::blockchain::BlockEntry>"
      },
      {
         "type_name" : "block_entry_array",
         "container_type" : "array",
         "contained_type" : "block_entry"
      },
      {
         "type_name" : "account_vote_summary",
         "cpp_return_type" : "thinkyoung::wallet::AccountVoteSummaryType"
      },
      {
         "type_name" : "timestamp",
         "cpp_return_type" : "fc::time_point"
      },
      {
         "type_name" : "slate_id_type",
         "cpp_return_type" : "thinkyoung::blockchain::SlateIdType"
      },
      {
         "type_name" : "method_data",
         "cpp_return_type" : "thinkyoung::api::MethodData",
         "cpp_include_file" : "api/ApiMetadata.hpp"
      },
      {
         "type_name" : "method_map_type",
         "container_type" : "dictionary",
         "key_type" : "std::string",
         "value_type" : "method_data"
      },
      {
         "type_name" : "exception",
         "cpp_return_type" : "fc::exception",
         "cpp_include_file" : "fc/exception/exception.hpp"
      },
      {
         "type_name" : "error_map",
         "container_type" : "dictionary",
         "key_type" : "timestamp",
         "value_type" : "exception"
      },
      {
         "type_name" : "brief_error_map",
         "container_type" : "dictionary",
         "key_type" : "timestamp",
         "value_type" : "std::string"
      },
      {
         "type_name" : "potential_peer_entry",
         "cpp_return_type" : "thinkyoung::net::PotentialPeerEntry",
         "cpp_return_type" : "net/PeerDatabase.hpp"
      },
      {
         "type_name" : "potential_peer_entry_array",
         "container_type" : "array",
         "contained_type" : "potential_peer_entry"
      },
      {
          "type_name" : "uint32_t_array",
          "container_type" : "array",
          "contained_type" : "uint32_t"
      },
      {
          "type_name" : "string_array",
          "container_type" : "array",
          "contained_type" : "string"
      },
      {
          "type_name" : "map<account_id_type, string>",
          "cpp_return_type" : "std::map<thinkyoung::blockchain::AccountIdType, std::string>"
      },
      {
          "type_name" : "slot_entrys_list",
          "cpp_return_type" : "std::vector<thinkyoung::blockchain::SlotEntry>",
          "cpp_include_file" : "blockchain/BlockEntry.hpp"
      },
      {
          "type_name" : "map<uint32_t, vector<fork_entry>>",
          "cpp_return_type" : "std::map<uint32_t, std::vector<thinkyoung::blockchain::ForkEntry>>",
          "cpp_include_file" : "blockchain/ChainDatabase.hpp"
      },
      {
          "type_name" : "map<transaction_id_type, fc::exception>",
          "cpp_return_type" : "std::map<thinkyoung::blockchain::TransactionIdType, fc::exception>"
      },
      {
          "type_name" : "compact_signature",
          "cpp_return_type" : "fc::ecc::compact_signature",
          "cpp_include_file" : "fc/crypto/elliptic.hpp"
      },
      {
          "type_name" : "sha256",
          "cpp_return_type" : "fc::sha256",
          "cpp_include_file" : "fc/crypto/sha256.hpp"
      },
      {
          "type_name" : "market_transaction",
          "cpp_return_type" : "thinkyoung::blockchain::MarketTransaction"
      },
      {
        "type_name" : "market_transaction_array",
        "container_type": "array",
        "contained_type": "market_transaction"
      },
      {
        "type_name" : "vote_strategy",
        "cpp_return_type" : "thinkyoung::wallet::VoteStrategy"
      },
      {
        "type_name" : "account_key_type",
        "cpp_return_type" : "thinkyoung::wallet::AccountKeyType"
      },
      {
        "type_name" : "vote_summary",
        "cpp_return_type" : "thinkyoung::wallet::VoteSummary"
      },
      {
        "type_name" : "snapshot_entry_list",
        "cpp_return_type" : "std::vector<thinkyoung::blockchain::SnapshotEntry>"
      },
      {
        "type_name" : "transaction_builder",
        "cpp_return_type" : "thinkyoung::wallet::TransactionBuilder",
        "cpp_include_file" : "wallet/TransactionBuilder.hpp"
      },
      {
        "type_name" : "optional_transaction_builder",
        "cpp_return_type" : "fc::optional<thinkyoung::wallet::TransactionBuilder>",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
      {
        "type_name" : "alp_trxid_balance",
        "cpp_return_type" : "thinkyoung::blockchain::AlpTrxidBalance",
	    "cpp_include_file" : "blockchain/Transaction.hpp"
      },
      {
	 "type_name" : "vector<alp_trxid_balance>",
         "cpp_return_type" : "std::vector<thinkyoung::blockchain::AlpTrxidBalance>",
      },
      {
	 "type_name" : "block_ip_array",
         "cpp_return_type" : "std::vector<std::string>",  
      },
      {
	 "type_name" : "contract_entry",
         "cpp_return_type" : "thinkyoung::blockchain::ContractEntry",  
      },
	   {
	 "type_name" : "contract_entry_list",
         "cpp_return_type" : "vector<ContractEntry>",  
      },
      {
	 "type_name" : "contract_entry_printable",
         "cpp_return_type" : "thinkyoung::blockchain::ContractEntryPrintable",  
      },
	  {
		"type_name" : "code_printable",
		"cpp_return_type" : "thinkyoung::blockchain::CodePrintAble"
	  },
      {
        "type_name" : "contract_id_type",
        "cpp_return_type" : "thinkyoung::blockchain::ContractIdType",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
	  
	  {
        "type_name" : "contract_id_list",
        "cpp_return_type" : "vector<string>",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
	  
	  {
        "type_name" : "sandbox_account_info_list",
        "cpp_return_type" : "vector<thinkyoung::blockchain::SandboxAccountInfo>",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
	  
	  {
        "type_name" : "contract_id_name_map",
        "cpp_return_type" : "unordered_map<string, string>",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
	  
	   {
        "type_name" : "script_id_type",
        "cpp_return_type" : "thinkyoung::blockchain::ScriptIdType",
        "cpp_include_file" : "blockchain/Types.hpp"
      }
	  ,
	   {
        "type_name" : "scriptentry",
        "cpp_return_type" : "thinkyoung::wallet::ScriptEntry",
        "cpp_include_file" : "wallet/WalletEntrys.hpp"
      }	 
	   ,
	   {
        "type_name" : "scriptentry_printable",
        "cpp_return_type" : "thinkyoung::wallet::ScriptEntryPrintable",
        "cpp_include_file" : "wallet/WalletEntrys.hpp"
      }	
	   {
        "type_name" : "scriptentry_list",
        "cpp_return_type" : "std::vector<thinkyoung::wallet::ScriptEntry>",
        "cpp_include_file" : "wallet/WalletEntrys.hpp"
      },
	   {
        "type_name" : "scriptentry_printable_list",
        "cpp_return_type" : "std::vector<thinkyoung::wallet::ScriptEntryPrintable>",
        "cpp_include_file" : "wallet/WalletEntrys.hpp"
      },      
	   {
        "type_name" : "scriptid_list",
        "cpp_return_type" : "std::vector<std::string>",
        "cpp_include_file" : "blockchain/Types.hpp"
      },
      {
        "type_name" : "delegate_salary_map",
        "cpp_return_type" : "std::map<std::string,thinkyoung::blockchain::DelegatePaySalary>",
      },
      {
         "type_name" : "eventoperation",
         "cpp_return_type" : "thinkyoung::blockchain::EventOperation"
      },
      {
        "type_name" : "eventoperation_array",
        "container_type" : "array",
        "contained_type" : "eventoperation"
      },
	  {
         "type_name" : "contract_trx_info",
         "cpp_return_type" : "thinkyoung::blockchain::ContractTrxInfo"
      }
    ]
}
