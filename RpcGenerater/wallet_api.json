{
  "category": "Wallet Methods",
  "methods" :
    [
      {
        "method_name": "wallet_get_info",
        "description": "Extra information about the wallet.",
        "return_type": "json_object",
        "parameters" :
          [
          ],
        "prerequisites" : ["json_authenticated"]
      },
      {
        "method_name": "wallet_open",
        "description": "Opens the wallet of the given name",
        "return_type": "void",
        "parameters" :
          [
            {
              "name" : "wallet_name",
              "type" : "wallet_name",
              "description" : "the name of the wallet to open"
            }
          ],
        "prerequisites" : ["json_authenticated"],
        "aliases" : ["open"]
      },
      {
        "method_name": "wallet_create",
        "description": "Creates a wallet with the given name",
        "return_type": "void",
        "parameters" :
          [
            {
              "name" : "wallet_name",
              "type" : "wallet_name",
              "description" : "name of the wallet to create"
            },
            {
              "name" : "new_passphrase",
              "type" : "new_passphrase",
              "description" : "a passphrase for encrypting the wallet"
            },
            {
              "name" : "brain_key",
              "type" : "brainkey",
              "description" : "a strong passphrase that will be used to generate all private keys, defaults to a large random number",
              "default_value" : ""
            }
          ],
        "prerequisites" : ["json_authenticated"],
        "aliases" : ["create"]
      },
      {
        "method_name": "wallet_get_name",
        "description": "Returns the wallet name passed to wallet_open",
        "return_type": "optional_wallet_name",
        "parameters" : [],
        "is_const" : true,
        "prerequisites" : ["no_prerequisites"]
      },
      {
        "method_name": "wallet_import_private_key",
        "description": "Loads the private key into the specified account. Returns which account it was actually imported to.",
        "return_type": "account_name",
        "parameters" : [
           {
              "name" : "wif_key",
              "type" : "wif_private_key",
              "description" : "A private key in bitcoin Wallet Import Format (WIF)"
           },
           {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the name of the account the key should be imported into, if null then the key must belong to an active account",
              "default_value" : null
           },
           {
              "name" : "create_new_account",
              "type" : "bool",
              "description" : "If true, the wallet will attempt to create a new account for the name provided rather than import the key into an existing account",
              "default_value" : false
           },
           {
              "name" : "rescan",
              "type" : "bool",
              "description" : "If true, the wallet will rescan the blockchain looking for transactions that involve this private key",
              "default_value" : false
           }
        ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["import_key", "importprivkey"]
      },
      {
        "method_name": "wallet_close",
        "description": "Closes the curent wallet if one is open",
        "return_type": "void",
        "parameters" : [],
        "prerequisites" : ["no_prerequisites"],
        "aliases" : ["close"]
      },
      {
        "method_name": "wallet_backup_create",
        "description": "Exports the current wallet to a JSON file",
        "return_type": "void",
        "parameters" :
          [
            {
              "name" : "json_filename",
              "type" : "filename",
              "description" : "the full path and filename of JSON file to generate",
              "example" : "/path/to/exported_wallet.json"
            }
          ],
        "is_const" : true,
        "prerequisites" : ["wallet_open"],
        "aliases" : ["backupwallet", "wallet_export_to_json"]
      },
      {
        "method_name": "wallet_backup_restore",
        "description": "Creates a new wallet from an exported JSON file",
        "return_type": "void",
        "parameters" :
          [
            {
              "name" : "json_filename",
              "type" : "filename",
              "description" : "the full path and filename of JSON wallet to import",
              "example" : "/path/to/exported_wallet.json"
            },
            {
              "name" : "wallet_name",
              "type" : "wallet_name",
              "description" : "name of the wallet to create"
            },
            {
              "name" : "imported_wallet_passphrase",
              "type" : "passphrase",
              "description" : "passphrase of the imported wallet"
            }
          ],
        "prerequisites" : ["json_authenticated"],
        "aliases" : ["wallet_create_from_json"]
      },
      {
        "method_name": "wallet_set_automatic_backups",
        "description": "Enables or disables automatic wallet backups",
        "return_type": "bool",
        "parameters" :
          [
            {
              "name" : "enabled",
              "type" : "bool",
              "description" : "true to enable and false to disable"
            }
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : ["auto_backup", "autobackup"]
      },
      {
        "method_name": "wallet_set_transaction_expiration_time",
        "description": "Set transaction expiration time",
        "return_type": "uint32_t",
        "parameters" :
          [
            {
              "name" : "seconds",
              "type" : "uint32_t",
              "description" : "seconds before new transactions expire"
            }
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : ["set_expiration"]
      },
      {
        "method_name": "wallet_account_transaction_history",
        "description": "Lists transaction history for the specified account",
        "return_type": "pretty_transactions",
        "parameters" :
          [
            {
              "name" : "account_name",
              "type" : "string",
              "description" : "the name of the account for which the transaction history will be returned, \"\" for all accounts",
              "example" : "alice",
              "default_value" : ""
            },
            {
               "name" : "asset_symbol",
               "type" : "string",
               "description" : "only include transactions involving the specified asset, or \"\" to include all",
               "default_value" : ""
            },
            {
               "name" : "limit",
               "type" : "int32_t",
               "description" : "limit the number of returned transactions; negative for most recent and positive for least recent. 0 does not limit",
               "default_value" : 0
            },
            {
               "name" : "start_block_num",
               "type" : "uint32_t",
               "description" : "the earliest block number to list transactions from; 0 to include all transactions starting from genesis",
               "default_value" : 0
            },
            {
               "name" : "end_block_num",
               "type" : "uint32_t",
               "description" : "the latest block to list transaction from; -1 to include all transactions ending at the head block",
               "default_value" : -1
            }
        ],
        "prerequisites" : ["wallet_open"],
        "is_const": true,
        "aliases" : ["history", "listtransactions"]
      },
	  {
		"method_name": "wallet_transaction_history_splite",
        "description": "Lists transaction history for the specified account",
        "return_type": "pretty_transactions",
        "parameters" :
          [
            {
              "name" : "account_name",
              "type" : "string",
              "description" : "the name of the account for which the transaction history will be returned, \"\" for all accounts",
              "example" : "alice",
              "default_value" : ""
            },
            {
               "name" : "asset_symbol",
               "type" : "string",
               "description" : "only include transactions involving the specified asset, or \"\" to include all",
               "default_value" : ""
            },
            {
               "name" : "limit",
               "type" : "int32_t",
               "description" : "limit the number of returned transactions; negative for most recent and positive for least recent. 0 does not limit",
               "default_value" : 0
            },
			{
				"name" : "transaction_type",
				"type" : "int32_t",
				"description" : "transaction type"
				"default_value" : "2"
			},
        ],
        "prerequisites" : ["wallet_open"],
        "is_const": true
	  },
      {
        "method_name": "wallet_account_historic_balance",
        "description": "Lists wallet's balance at the given time",
        "return_type": "account_balance_summary_type",
        "parameters" :
          [
            {
              "name" : "time",
              "type" : "timestamp",
              "description" : "the date and time for which the balance will be computed",
              "example" : "2015-01-31T23:59:59"
            },
            {
              "name" : "account_name",
              "type" : "string",
              "description" : "the name of the account for which the historic balance will be returned, \"\" for all accounts",
              "example" : "alice",
              "default_value" : ""
            }
        ],
        "prerequisites" : ["wallet_open"],
        "is_const": true,
        "aliases" : []
      },
      {
        "method_name": "wallet_remove_transaction",
        "description": "Removes the specified transaction entry from your transaction history. USE WITH CAUTION! Rescan cannot reconstruct all transaction details",
        "return_type": "void",
        "parameters" :
          [
            {
              "name" : "transaction_id",
              "type" : "string",
              "description" : "the id (or id prefix) of the transaction entry"
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["remove_transaction", "wallet_transaction_remove"]
      },
      {
        "method_name": "wallet_get_pending_transaction_errors",
        "description": "Return any errors for your currently pending transactions",
        "return_type": "map<transaction_id_type, fc::exception>",
        "parameters" :
        [
            {
              "name" : "filename",
              "type" : "path",
              "description" : "filename to save pending transaction errors to",
              "default_value" : ""
            }
        ],
        "prerequisites" : ["wallet_open"],
        "is_const": true,
        "aliases" : []
      },
      {
        "method_name": "wallet_lock",
        "description": "Lock the private keys in wallet, disables spending commands until unlocked",
        "return_type": "void",
        "parameters" : [],
        "prerequisites" : ["wallet_open"],
        "aliases" : ["lock"]
      },
      {
        "method_name": "wallet_unlock",
        "description": "Unlock the private keys in the wallet to enable spending operations",
        "return_type": "void",
        "parameters" :
          [
            {
              "name" : "timeout",
              "type" : "uint32_t",
              "description" : "the number of seconds to keep the wallet unlocked"
            },
            {
              "name" : "passphrase",
              "type" : "passphrase",
              "description" : "the passphrase for encrypting the wallet"
            }
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : ["unlock", "walletpassphrase"]
      },
      {
        "method_name": "wallet_change_passphrase",
        "description": "Change the password of the current wallet",
        "return_type": "void",
        "parameters" :
          [
			{
				"name" : "old_passphrase"
				"type" : "passphrase",
				"description" : "the old passphrase for this wallet"
			}
            {
              "name" : "passphrase",
              "type" : "passphrase",
              "description" : "the passphrase for encrypting the wallet"
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["walletpassphrasechange"],
        "detailed_description" : "This will change the wallet's spending passphrase, please make sure you remember it."
      },
	  {
        "method_name": "wallet_check_passphrase",
        "description": "check the password of the current wallet",
        "return_type": "bool",
        "parameters" :
          [
			{
				"name" : "passphrase"
				"type" : "passphrase",
				"description" : "the passphrase to be checking"
			}
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["check_passphrase","check_password"],
        "detailed_description" : "This will check the wallet's spending passphrase."
      },
	  {
        "method_name": "wallet_check_address",
        "description": "check address is valid address or an acount name.",
        "return_type": "bool",
        "parameters" :
          [
			{
				"name" : "address"
				"type" : "string",
				"description" : "the address/accountname to be checking (string, required)"
			}
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : ["check_address"],
        "detailed_description" : "This will check the address."
      },
      {
        "method_name": "wallet_list",
        "description": "Return a list of wallets in the current data directory",
        "return_type": "wallet_name_array",
        "parameters" : [],
        "prerequisites" : ["json_authenticated"],
        "is_const": true,
        "aliases" : []
      },
      {
        "method_name": "wallet_account_create",
        "description": "Add new account for receiving payments",
        "return_type": "address",
        "parameters" :
          [
            {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the name you will use to refer to this receive account"
            },
            {
              "name" : "private_data",
              "type" : "json_variant",
              "description" : "Extra data to store with this account entry",
              "default_value" : null
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : [ "wallet_create_account", "create_account" ]
      },
      {
        "method_name": "wallet_account_set_approval",
        "description": "Updates your approval of the specified account",
        "return_type": "int8_t",
        "parameters" :
          [
            {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the name of the account to set approval for"
            },
            {
              "name" : "approval",
              "type" : "int8_t",
              "description" : "1, 0, or -1 respectively for approve, neutral, or disapprove",
              "default_value" : 1
            }
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : [ "approve", "set_approval", "wallet_approve_delegate", "wallet_approve" ]
      },
      {
        "method_name": "wallet_get_all_approved_accounts",
        "description": "Return all approved account entrys",
        "return_type": "account_entry_array",
        "parameters" :
          [
            {
              "name" : "approval",
              "type" : "int8_t",
              "description" : "1, 0, or -1 respectively for approve, neutral, or disapprove",
              "default_value" : 1
            }
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : [ "all_approved_accounts", "approved_accounts" ]
      },
      {
         "method_name" : "wallet_address_create",
         "description" : "Creates an address which can be used for a simple (non-TITAN) transfer.",
         "return_type" : "string",
         "parameters"  : [
            {
              "name" : "account_name",
              "type" : "string",
              "description" : "The account name that will own this address"
            },
            {
              "name" : "label",
              "type" : "string",
              "description" : "",
              "default_value" : ""
            },
            {
              "name" : "legacy_network_byte",
              "type" : "int32_t",
              "description" : "If not -1, use this as the network byte for a BTC-style address.",
              "default_value" : -1
            }
         ],
         "prerequisites" : ["wallet_open"],
         "aliases": ["new_address"]
      },
      {
         "method_name" : "wallet_transfer_to_address",
         "description" : "Do a simple (non-TITAN) transfer to an address",
         "return_type" : "transaction_entry",
         "parameters"  : [
            {
              "name" : "amount_to_transfer",
              "type" : "string",
              "description" : "the amount of shares to transfer"
            },
            {
              "name" : "asset_symbol",
              "type" : "asset_symbol",
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name",
              "type" : "account_name",
              "description" : "the source account to draw the shares from"
            },
            {
              "name" : "to_address",
              "type" : "string",
              "description" : "the address or pubkey to transfer to"
            },
            {
              "name" : "memo_message",
              "type" : "information",
              "description" : "a memo to store with the transaction",
              "default_value" : ""
            },
            {
              "name" : "strategy",
              "type" : "vote_strategy",
              "description" : "enumeration [vote_none | vote_all | vote_random | vote_recommended] ",
              "default_value" : "vote_recommended"
            }
         ],
         "prerequisites" : ["wallet_open"]
      },
      
      {
        "method_name": "wallet_transfer_to_public_account",
        "description": "Sends given amount to the given account",
        "return_type": "transaction_entry",
        "parameters" :
          [
            {
              "name" : "amount_to_transfer",
              "type" : "string",
              "description" : "the amount of shares to transfer"
            },
            {
              "name" : "asset_symbol",
              "type" : "asset_symbol",
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name",
              "type" : "sending_account_name",
              "description" : "the source account to draw the shares from"
            },
            {
              "name" : "to_account_name",
              "type" : "receive_account_name",
              "description" : "the account to transfer the shares to"
            },
            {
              "name" : "memo_message",
              "type" : "information",
              "description" : "a memo to store with the transaction",
              "default_value" : ""
            },
            {
              "name" : "strategy",
              "type" : "vote_strategy",
              "description" : "enumeration [vote_none | vote_all | vote_random | vote_recommended] ",
              "default_value" : "vote_recommended"
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["transfer_public"]
    },
    {
        "method_name": "wallet_withdraw_from_address",
        "description": "",
        "return_type": "transaction_builder",
        "parameters":
        [
            {
              "name": "amount",
              "type": "string",
              "description": "how much to transfer"
            },
            {
              "name": "symbol",
              "type": "string",
              "description": "which asset"
            },

            {
              "name": "from_address",
              "type": "address",
              "description": "the balance address to withdraw from"
            },
            {
              "name": "to",
              "type": "string",
              "description": "address or account to receive funds"
            },
            {
              "name" : "strategy",
              "type" : "vote_strategy",
              "description" : "enumeration [vote_none | vote_all | vote_random | vote_recommended] ",
              "default_value" : "vote_none"
            },
            {
                "name": "sign_and_broadcast",
                "type": "bool",
                "description": "",
                "default_value": true
            },
            {
              "name" : "builder_path",
              "type" : "string",
              "description" : "If specified, will write builder here instead of to DATA_DIR/transactions/latest.trx",
              "default_value" : ""
            }

        ],
        "prerequisites": ["json_authenticated"],
        "aliases": ["withdraw_from_address"]
    },
      
      {
        "method_name": "wallet_rescan_blockchain",
        "description": "Scans the blockchain history for operations relevant to this wallet.",
        "return_type": "void",
        "parameters" :
          [
            {
              "name" : "start_block_num",
              "type" : "uint32_t",
              "description" : "the first block to scan",
              "default_value" : 0
            },
            {
              "name" : "limit",
              "type" : "uint32_t",
              "description" : "the maximum number of blocks to scan",
              "default_value" : -1
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["scan", "rescan"]
      },
      {
        "method_name": "wallet_cancel_scan",
        "description": "Cancel any current scan task",
        "return_type": "void",
        "parameters" : [],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : []
      },
      {
        "method_name": "wallet_get_transaction",
        "description": "Queries your wallet for the specified transaction",
        "return_type": "transaction_entry",
        "parameters" :
          [
            {
              "name" : "transaction_id",
              "type" : "string",
              "description" : "the id (or id prefix) of the transaction"
            }
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : ["get_transaction"]
      },
      {
        "method_name": "wallet_scan_transaction",
        "description": "Scans the specified transaction",
        "return_type": "transaction_entry",
        "parameters" :
          [
            {
              "name" : "transaction_id",
              "type" : "string",
              "description" : "the id (or id prefix) of the transaction"
            },
            {
              "name" : "overwrite_existing",
              "type" : "bool",
              "description" : "true to overwrite existing wallet transaction entry and false otherwise",
              "default_value": false
            }
          ],
        "prerequisites" : ["wallet_unlocked"],
        "aliases" : ["scan_transaction", "wallet_transaction_scan"]
      },
      {
        "method_name": "wallet_rebroadcast_transaction",
        "description": "Rebroadcasts the specified transaction",
        "return_type": "void",
        "parameters" :
          [
            {
              "name" : "transaction_id",
              "type" : "string",
              "description" : "the id (or id prefix) of the transaction"
            }
          ],
        "prerequisites" : ["wallet_open"],
        "aliases" : ["rebroadcast", "wallet_transaction_rebroadcast"]
      },
      {
         "method_name" : "wallet_account_register",
         "description" : "Updates the data published about a given account",
         "return_type" : "transaction_entry",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the account that will be updated"
               },
               {
                  "name" : "pay_from_account",
                  "type" : "account_name",
                  "description" : "the account from which fees will be paid"
               },
               {
                  "name" : "public_data",
                  "type" : "json_variant",
                  "description" : "public data about the account",
                  "default_value" : null
               },
               {
                  "name" : "delegate_pay_rate",
                  "type" : "uint8_t",
                  "description" : "-1 for non-delegates; otherwise the percent of delegate pay to accept per produced block",
                  "default_value" : -1
               },
               {
                  "name" : "account_type",
                  "type" : "string",
                  "description" : "titan_account | public_account - public accounts do not receive memos and all payments are made to the active key",
                  "default_value" : "titan_account"
               }
            ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "register" ]
      },
      {
         "method_name" : "wallet_account_update_private_data",
         "description" : "Updates the local private data for an account",
         "return_type" : "void",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the account that will be updated"
               },
               {
                  "name" : "private_data",
                  "type" : "json_variant",
                  "description" : "private data about the account",
                  "default_value" : null
               }
            ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "update_private_data" ]
      },
      {
         "method_name" : "wallet_account_update_registration",
         "description" : "Updates the data published about a given account",
         "return_type" : "transaction_entry",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the account that will be updated"
               },
               {
                  "name" : "pay_from_account",
                  "type" : "account_name",
                  "description" : "the account from which fees will be paid"
               },
               {
                  "name" : "public_data",
                  "type" : "json_variant",
                  "description" : "public data about the account",
                  "default_value" : null
               },
               {
                  "name" : "delegate_pay_rate",
                  "type" : "uint8_t",
                  "description" : "-1 for non-delegates; otherwise the percent of delegate pay to accept per produced block",
                  "default_value" : -1
               }
            ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "update_registration" ]
      },
      {
         "method_name" : "wallet_account_update_active_key",
         "description" : "Updates the specified account's active key and broadcasts the transaction.",
         "return_type" : "transaction_entry",
         "parameters"  : [
            {
                "name" : "account_to_update",
                "type" : "account_name",
                "description" : "The name of the account to update the active key of."
            },
            {
                "name" : "pay_from_account",
                "type" : "account_name",
                "description" : "The account from which fees will be paid."
            },
            {
                "name" : "new_active_key",
                "type" : "string",
                "description" : "WIF private key to update active key to. If empty, a new key will be generated.",
                "default_value" : ""
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_list_accounts",
         "description" : "Lists all accounts associated with this wallet",
         "return_type" : "wallet_account_entry_array",
         "parameters"  : [],
         "is_const" : true,
         "prerequisites" : ["wallet_open"],
         "aliases" : [ "listaccounts" ]
      },
      {
         "method_name" : "wallet_list_unregistered_accounts",
         "description" : "Lists all unregistered accounts belonging to this wallet",
         "return_type" : "wallet_account_entry_array",
         "parameters"  : [],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_list_my_accounts",
         "description" : "Lists all accounts for which we have a private key in this wallet",
         "return_type" : "wallet_account_entry_array",
         "parameters"  : [],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_list_my_addresses",
         "description" : "Lists all accounts and account addresses for which we have a private key in this wallet",
         "return_type" : "account_address_entry_array",
         "parameters"  : [],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_get_account",
         "description" : "Get the account entry for a given name",
         "return_type" : "wallet_account_entry",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the name of the account to retrieve"
               }
            ],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_get_account_public_address",
         "description" : "Get the account entry for a given name",
         "return_type" : "string",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the name of the account whose public address you want"
               }
            ],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_remove_contact_account",
         "description" : "Remove a contact account from your wallet",
         "return_type" : "void",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the name of the contact"
               }
            ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_account_rename",
         "description" : "Rename an account in wallet",
         "return_type" : "void",
         "parameters"  : [
               {
                  "name" : "current_account_name",
                  "type" : "account_name",
                  "description" : "the current name of the account"
               },
               {
                  "name" : "new_account_name",
                  "type" : "new_account_name",
                  "description" : "the new name for the account"
               }
            ],
         "prerequisites" : ["wallet_open"],
         "aliases" : ["wallet_rename_account"]
      },
      {
         "method_name" : "wallet_asset_create",
         "description" : "Creates a new user issued asset",
         "return_type" : "transaction_entry",
         "parameters"  : [
               {
                  "name" : "symbol",
                  "type" : "asset_symbol",
                  "description" : "the ticker symbol for the new asset"
               },
               {
                  "name" : "asset_name",
                  "type" : "string",
                  "description" : "the name of the asset"
               },
               {
                  "name" : "issuer_name",
                  "type" : "string",
                  "description" : "the name of the issuer of the asset"
               },
               {
                  "name" : "description",
                  "type" : "string",
                  "description" : "a description of the asset"
               },
               {
                  "name" : "maximum_share_supply",
                  "type" : "string",
                  "description" : "the maximum number of shares of the asset"
               },
               {
                  "name" : "precision",
                  "type" : "uint64_t",
                  "description" : "defines where the decimal should be displayed, must be a power of 10"
               },
               {
                  "name" : "public_data",
                  "type" : "json_variant",
                  "description" : "arbitrary data attached to the asset",
                  "default_value" : null
               },
               {
                  "name" : "is_market_issued",
                  "type" : "bool",
                  "description" : "creation of a new BitAsset that is created by shorting",
                  "default_value": false
               }
            ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_asset_issue",
         "description" : "Issues new shares of a given asset type",
         "return_type" : "transaction_entry",
         "parameters"  : [
               {
                  "name" : "amount",
                  "type" : "string",
                  "description" : "the amount of shares to issue"
               },
               {
                  "name" : "symbol",
                  "type" : "asset_symbol",
                  "description" : "the ticker symbol for asset"
               },
               {
                  "name" : "to_account_name",
                  "type" : "account_name",
                  "description" : "the name of the account to receive the shares"
               },
               {
                  "name" : "memo_message",
                  "type" : "information",
                  "description" : "the memo to send to the receiver",
                  "default_value": ""
               }
            ],
         "detailed_description" : "The asset being issued must have been created via wallet_asset_create in a previous block.",
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_asset_issue_to_addresses",
         "description" : "Issues new UIA shares to specific addresses.",
         "return_type" : "transaction_entry",
         "parameters"  : [
               {
                  "name" : "symbol",
                  "type" : "asset_symbol",
                  "description" : "the ticker symbol for asset"
               },
               {
                  "name" : "addresses",
                  "type" : "snapshot_map",
                  "description" : "A map of addresses-to-amounts to transfer the new shares to",
               }
            ],
         "detailed_description" : "This is intended to be used with a helper script to break up snapshots. It will not do any magic for you.",
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name"    : "wallet_account_balance",
         "description"    : "Lists the total asset balances for the specified account",
         "cached"         : true,
         "return_type"    : "account_balance_summary_type",
         "parameters"     : [
         {
            "name" : "account_name",
            "type" : "account_name",
            "description" : "the account to get a balance for, or leave empty for all accounts",
            "default_value" : ""
         }
         ],
         "is_const" : true,
         "prerequisites" : ["wallet_open"],
         "aliases" : ["balance", "getbalance"]
      },
      {
         "method_name"    : "wallet_account_balance_ids",
         "description"    : "Lists the balance IDs for the specified account",
         "return_type"    : "account_balance_id_summary_type",
         "parameters"     : [
         {
            "name" : "account_name",
            "type" : "account_name",
            "description" : "the account to get a balance IDs for, or leave empty for all accounts",
            "default_value" : ""
         }
         ],
         "is_const" : true,
         "prerequisites" : ["wallet_open"],
         "aliases" : []
      },
      {
         "method_name" : "wallet_account_list_public_keys",
         "description" : "Lists all public keys in this account",
         "cached"      : true,
         "return_type" : "public_key_summary_array",
         "parameters"  : [
           {
                "name" : "account_name",
                "type" : "account_name",
                "description" : "the account for which public keys should be listed"
           }
         ],
         "prerequisites" : ["wallet_open"],
         "aliases": ["public_keys"]
      },
      {
         "method_name"  : "wallet_delegate_withdraw_pay",
         "description"  : "Used to transfer some of the delegate's pay from their balance",
         "return_type"  : "transaction_entry",
         "parameters"   : [
            {
              "name" : "delegate_name",
              "type" : "account_name",
              "description" : "the delegate whose pay is being cashed out"
            },
            {
              "name" : "to_account_name",
              "type" : "account_name",
              "description" : "the account that should receive the funds"
            },
            {
               "name" : "amount_to_withdraw",
               "type" : "string",
               "description" : "the amount to withdraw"
            }
         ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : ["pay_delegate"]
      },
	  {
         "method_name"  : "wallet_delegate_pay_balance_query",
         "description"  : "query delegate's pay balance",
         "return_type"  : "delegate_salarys",
         "parameters"   : [
            {
              "name" : "delegate_name",
              "type" : "account_name",
              "description" : "the delegate whose pay is being cashed out"
            }
         ],
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : ["query_salary"]
      },
	  {
         "method_name"  : "wallet_active_delegate_salary",
         "description"  : "query delegate's pay balance",
         "return_type"  : "delegate_salary_map",
         "parameters"   : [],
         "prerequisites" : ["wallet_unlocked"],
      },
	  {
		"method_name"  : "wallet_get_delegate_statue",
         "description"  : "Get delegate produce block statue",
         "return_type"  : "bool",
         "parameters"   : [
         {
            "name" : "account_name",
            "type" : "string",
            "description" : "delegate account name to get statue"
         }
         ],
         "prerequisites" : ["wallet_open"]
	  }
	  {
		 "method_name"  : "wallet_set_transaction_imessage_fee_coe",
		 "description"  : "Set imessage fee coefficient",
		 "return_type"  : "void",
		 "parameters"   : [
		 {
		    "name" : "fee_coe",
		    "type" : "string",
		    "description" : "fee coefficient"
		 }
		 ],
		 "prerequisites" : ["wallet_open"],
		 "aliases" : ["set_fee_coe"]
	  },
      {
         "method_name"  : "wallet_get_transaction_imessage_fee_coe",
         "description"  : "Get imessage fee coefficient",
         "return_type"  : "real_amount",
         "parameters"   : [],
         "prerequisites" : ["wallet_open"],
         "aliases" : ["get_fee_coe"]
      },
      {
		 "method_name"  : "wallet_set_transaction_imessage_soft_max_length",
		 "description"  : "Set imessage soft max length",
		 "return_type"  : "void",
		 "parameters"   : [
		 {
		    "name" : "soft_length",
		    "type" : "amount",
		    "description" : "max soft length"
		 }
		 ],
		 "prerequisites" : ["wallet_open"],
		 "aliases" : ["set_soft_length"]
	  },
      {
         "method_name"  : "wallet_get_transaction_imessage_soft_max_length",
         "description"  : "Get soft max length",
         "return_type"  : "amount",
         "parameters"   : [],
         "prerequisites" : ["wallet_open"],
         "aliases" : ["get_soft_length"]
      },
      {
         "method_name"  : "wallet_set_transaction_fee",
         "description"  : "Set the fee to add to new transactions",
         "return_type"  : "asset",
         "parameters"   : [
         {
            "name" : "fee",
            "type" : "string",
            "description" : "the wallet transaction fee to set"
         }
         ],
         "prerequisites" : ["wallet_open"],
         "aliases" : ["wallet_set_priority_fee", "set_priority_fee", "settrxfee", "setfee", "set_fee"]
      },
      {
         "method_name"  : "wallet_get_transaction_fee",
         "description"  : "Returns ",
         "cached"       : true,
         "return_type"  : "asset",
         "parameters"   : [
         {
            "name" : "symbol",
            "type" : "asset_symbol",
            "description" : "the wallet transaction if paid in the given asset type",
            "default_value" : ""
         }
         ],
         "prerequisites" : ["wallet_open"],
         "aliases" : ["wallet_get_priority_fee", "get_priority_fee", "gettrxfee", "getfee", "get_fee"]
      },
      {
         "method_name" : "wallet_dump_private_key",
         "description" : "Reveals the private key corresponding to the specified public key or address; use with caution",
         "return_type"  : "optional_string",
         "parameters" : [
             {
                "name" : "input",
                "type" : "string",
                "description" : "public key or address to dump private key for"
             }
         ],
         "is_const" : true,
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : [ "dump_private_key", "dumpprivkey" ]
      },
      {
         "method_name" : "wallet_dump_account_private_key",
         "description" : "Reveals the specified account private key; use with caution",
         "return_type"  : "optional_string",
         "parameters" : [
             {
                "name" : "account_name",
                "type" : "string",
                "description" : "account name to dump private key for"
             },
             {
                "name" : "key_type",
                "type" : "account_key_type",
                "description" : "which account private key to dump; one of {owner_key, active_key, signing_key}"
             }
         ],
         "is_const" : true,
         "prerequisites" : ["wallet_unlocked"],
         "aliases" : []
      },
      {
         "method_name" : "wallet_account_vote_summary",
         "description" : "Returns the allocation of votes by this account",
         "return_type" : "account_vote_summary",
         "parameters"  : [
            {
                "name" :  "account_name",
                "type" : "account_name",
                "description" : "the account to report votes on, or empty for all accounts",
                "default_value" : ""
            }
          ],
         "is_const" : true,
         "prerequisites" : ["wallet_open"],
         "aliases" : ["votes"]
      },
      {
         "method_name" : "wallet_check_vote_status",
         "description" : "Get info about the votes of balances controlled by this account",
         "return_type" : "vote_summary",
         "parameters"  : [
             {
                "name" : "account",
                "type" : "account_name",
                "description" : ""
             }
         ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_set_setting",
         "description" : "Set a property in the GUI settings DB",
         "return_type" : "void",
         "parameters"  : [
            {
                "name" : "name",
                "type" : "string",
                "description" : "the name of the setting to set"
            },
            {
                "name" : "value",
                "type" : "variant",
                "description" : "the value to set the setting to"
            }
          ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_get_setting",
         "description" : "Get the value of the given setting",
         "return_type" : "optional_variant",
         "parameters"  : [
            {
                "name" : "name",
                "type" : "string",
                "description" : "The name of the setting to fetch"
            }
          ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_delegate_set_block_production",
         "description" : "Enable or disable block production for a particular delegate account",
         "return_type" : "void",
         "parameters"  : [
            {
                "name" : "delegate_name",
                "type" : "string",
                "description" : "The delegate to enable/disable block production for; ALL for all delegate accounts"
            },
            {
                "name" : "enabled",
                "type" : "bool",
                "description" : "true to enable block production, false otherwise"
            }
          ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_set_transaction_scanning",
         "description" : "Enable or disable wallet transaction scanning",
         "return_type" : "bool",
         "parameters"  : [
            {
                "name" : "enabled",
                "type" : "bool",
                "description" : "true to enable transaction scanning, false otherwise"
            }
          ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name" : "wallet_sign_hash",
         "description" : "Signs the provided message digest with the account key",
         "return_type" : "compact_signature",
         "parameters"  : [
            {
                "name" : "signer",
                "type" : "string",
                "description" : "A public key, address, or account name whose key to sign with"
            },
            {
                "name" : "hash",
                "type" : "sha256",
                "description" : "SHA256 digest of the message to sign"
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_login_start",
         "description" : "Initiates the login procedure by providing a Alp Login URL",
         "return_type" : "string",
         "parameters"  : [
            {
                "name" : "server_account",
                "type" : "string",
                "description" : "Name of the account of the server. The user will be shown this name as the site he is logging into."
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_login_finish",
         "description" : "Completes the login procedure by finding the user's public account key and shared secret",
         "return_type" : "variant",
         "parameters"  : [
            {
                "name" : "server_key",
                "type" : "public_key",
                "description" : "The one-time public key from wallet_login_start."
            },
            {
                "name" : "client_key",
                "type" : "public_key",
                "description" : "The client's one-time public key."
            },
            {
                "name" : "client_signature",
                "type" : "compact_signature",
                "description" : "The client's signature of the shared secret."
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_balance_set_vote_info",
         "description" : "Set this balance's voting address and slate",
         "return_type" : "transaction_builder",
         "parameters"  : [
               {
                  "name" : "balance_id",
                  "type" : "address",
                  "description" : "the current name of the account"
               },
               {
                  "name" : "voter_address",
                  "type" : "string",
                  "description" : "The new voting address. If none is specified, tries to re-use existing address.",
                  "default_value": ""
               },
               {
                 "name" : "strategy",
                 "type" : "vote_strategy",
                 "description" : "enumeration [vote_none | vote_all | vote_random | vote_recommended] ",
                 "default_value" : "vote_all"
               },
               {
                  "name" : "sign_and_broadcast",
                  "type" : "bool",
                  "description" : "",
                  "default_value" : "true"
               },
               {
                  "name" : "builder_path",
                  "type" : "string",
                  "description" : "If specified, will write builder here instead of to DATA_DIR/transactions/latest.trx",
                  "default_value" : ""
               }
            ],
         "prerequisites" : ["wallet_open"],
         "aliases" : ["set_vote_info"]
      },
      {
         "method_name" : "wallet_publish_slate",
         "description" : "Publishes the current wallet delegate slate to the public data associated with the account",
         "return_type" : "transaction_entry",
         "parameters"  : [
            {
                "name" : "publishing_account_name",
                "type" : "account_name",
                "description" : "The account to publish the slate ID under"
            },
            {
                "name" : "paying_account_name",
                "type" : "account_name",
                "description" : "The account to pay transaction fees or leave empty to pay with publishing account",
                "default_value" : ""
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_publish_version",
         "description" : "Publish your current client version to the specified account's public data entry",
         "return_type" : "transaction_entry",
         "parameters"  : [
            {
                "name" : "publishing_account_name",
                "type" : "account_name",
                "description" : "The account to publish the client version under"
            },
            {
                "name" : "paying_account_name",
                "type" : "account_name",
                "description" : "The account to pay transaction fees with or leave empty to pay with publishing account",
                "default_value" : ""
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_collect_genesis_balances",
         "description" : "Collect specified account's genesis balances",
         "return_type" : "transaction_entry",
         "parameters"  : [
            {
                "name" : "account_name",
                "type" : "account_name",
                "description" : "account to collect genesis balances for"
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_recover_accounts",
         "description" : "Attempts to recover accounts created after last backup was taken and returns number of successful recoveries. Use if you have restored from backup and are missing accounts.",
         "return_type" : "int32_t",
         "parameters"  : [
            {
                "name" : "accounts_to_recover",
                "type" : "int32_t",
                "description" : "The number of accounts to attept to recover"
            },
            {
                "name" : "maximum_number_of_attempts",
                "type" : "int32_t",
                "description" : "The maximum number of keys to generate trying to recover accounts",
                "default_value" : 1000
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_verify_titan_deposit",
         "description" : "Verify whether the specified transaction made a TITAN deposit to the current wallet; returns null if not",
         "return_type" : "optional_variant_object",
         "parameters"  : [
            {
                "name" : "transaction_id_prefix",
                "type" : "string",
                "description" : "the id (or id prefix) of the transaction entry"
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
     {
         "method_name" : "wallet_repair_entrys",
         "description" : "tries to repair any inconsistent wallet account, key, and transaction entrys",
         "return_type" : "void",
         "parameters"  : [
             {
                "name" : "collecting_account_name",
                "type" : "account_name",
                "description" : "collect any orphan balances into this account",
                "default_value" : ""
             }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_regenerate_keys",
         "description" : "regenerates private keys as part of wallet recovery",
         "return_type" : "int32_t",
         "parameters"  : [
             {
                "name" : "account_name",
                "type" : "account_name",
                "description" : "the account the generated keys should be a part of"
             },
             {
                "name" : "max_key_number",
                "type" : "uint32_t",
                "description" : "the last key number to regenerate"
             }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_account_retract",
         "description" : "Retract (permanently disable) the specified account in case of master key compromise.",
         "return_type" : "transaction_entry",
         "parameters"  : [
            {
                "name" : "account_to_retract",
                "type" : "account_name",
                "description" : "The name of the account to retract."
            },
            {
                "name" : "pay_from_account",
                "type" : "account_name",
                "description" : "The account from which fees will be paid."
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
	  {
         "method_name" : "wallet_account_delete",
         "description" : "delete account from Wallet.",
         "return_type" : "bool",
         "parameters"  : [
            {
                "name" : "account_name",
                "type" : "string",
                "description" : "The name of the account to retract."
            }
         ],
         "prerequisites" : ["wallet_unlocked"]
      }, 
      {
         "method_name" : "wallet_transfer_to_address_rpc",
         "description" : "Do a simple (non-TITAN) transfer to an address",
         "return_type" : "string",
         "parameters"  : [
            {
              "name" : "amount_to_transfer",
              "type" : "string",
              "description" : "the amount of shares to transfer"
            },
            {
              "name" : "asset_symbol",
              "type" : "asset_symbol",
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name",
              "type" : "account_name",
              "description" : "the source account to draw the shares from"
            },
            {
              "name" : "to_address",
              "type" : "string",
              "description" : "the address or pubkey to transfer to"
            },
            {
              "name" : "memo_message",
              "type" : "information",
              "description" : "a memo to store with the transaction",
              "default_value" : ""
            },
            {
              "name" : "strategy",
              "type" : "vote_strategy",
              "description" : "enumeration [vote_none | vote_all | vote_random | vote_recommended] ",
              "default_value" : "vote_recommended"
            }
         ],
         "prerequisites" : ["wallet_open"]
      },
      {
         "method_name"    : "wallet_account_balance_rpc",
         "description"    : "Lists the total asset balances for the specified account",
         "cached"         : true,
         "return_type"    : "string",
         "parameters"     : [
         {
            "name" : "account_name",
            "type" : "account_name",
            "description" : "the account to get a balance for, or leave empty for all accounts",
            "default_value" : ""
         }
         ],
         "is_const" : true,
         "prerequisites" : ["wallet_open"]
      },   
      {
        "method_name": "wallet_transfer_to_public_account_rpc",
        "description": "Sends given amount to the given account",
        "return_type": "string",
        "parameters" :
          [
            {
              "name" : "amount_to_transfer",
              "type" : "string",
              "description" : "the amount of shares to transfer"
            },
            {
              "name" : "asset_symbol",
              "type" : "asset_symbol",
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name",
              "type" : "sending_account_name",
              "description" : "the source account to draw the shares from"
            },
            {
              "name" : "to_account_name",
              "type" : "receive_account_name",
              "description" : "the account to transfer the shares to"
            },
            {
              "name" : "memo_message",
              "type" : "information",
              "description" : "a memo to store with the transaction",
              "default_value" : ""
            },
            {
              "name" : "strategy",
              "type" : "vote_strategy",
              "description" : "enumeration [vote_none | vote_all | vote_random | vote_recommended] ",
              "default_value" : "vote_recommended"
            }
          ],
        "prerequisites" : ["wallet_unlocked"]
    }, 
	  {
        "method_name": "wallet_get_account_owner_publickey",
        "description": "Get owner publickey of specific account",
        "return_type": "public_key",
        "parameters" :
          [
            {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the name of the account"
            }
          ],
        "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_transfer_to_contract",
         "description" : "Do a simple transfer to a contract (name or address)",
         "return_type" : "transaction_entry",
         "parameters"  : [
            {
              "name" : "amount_to_transfer",
              "type" : "real_amount",
              "description" : "the amount of shares to transfer"
            },
            {
              "name" : "asset_symbol",
              "type" : "asset_symbol",
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name",
              "type" : "account_name",
              "description" : "the source account to draw the shares from"
            },
            {
              "name" : "to_contract",
              "type" : "string",
              "description" : "the contract name or contract address to transfer to"
            },
            {
              "name" : "amount_for_exec",
              "type" : "real_amount",
              "description" : "the amount of shares to exec  on_deposit callback of target contract"
            },
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "wallet_transfer_to_contract_testing",
         "description" : "Do a simple transfer to a contract (name or address) on local endpoint, and do not spread it on P2P network",
         "return_type" : "asset_array",
         "parameters"  : [
            {
              "name" : "amount_to_transfer",
              "type" : "real_amount",
              "description" : "the amount of shares to transfer"
            },
            {
              "name" : "asset_symbol",
              "type" : "asset_symbol",
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name",
              "type" : "account_name",
              "description" : "the source account to draw the shares from"
            },
            {
              "name" : "to_contract",
              "type" : "string",
              "description" : "the contract name or contract address to transfer to"
            },
         ],
         "prerequisites" : ["wallet_unlocked"]
      },	  
	  
	   {
         "method_name" : "wallet_get_contracts",
         "description" : "get all the contracts belong to the account of the wallet",
         "return_type" : "contract_id_list",
         "parameters"  : [
			{
              "name" : "account_name",
              "type" : "string",
              "description" : "the account in wallet"
			  "default_value" : ""
            },
         ],
         "prerequisites" : ["wallet_unlocked"]
      },
      {
         "method_name" : "create_transfer_transaction",
         "description" : "create a simple (non-TITAN) transfer to an address without broadcast",
         "return_type" : "signed_transaction",
         "parameters"  : [
            {
              "name" : "amount_to_transfer",
              "type" : "string",
              "description" : "the amount of shares to transfer"
            },
            {
              "name" : "asset_symbol",
              "type" : "asset_symbol",
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name",
              "type" : "account_name",
              "description" : "the source account to draw the shares from"
            },
            {
              "name" : "to_address",
              "type" : "string",
              "description" : "the address or pubkey to transfer to"
            },
            {
              "name" : "memo_message",
              "type" : "information",
              "description" : "a memo to store with the transaction",
              "default_value" : ""
            },
            {
              "name" : "strategy",
              "type" : "vote_strategy",
              "description" : "enumeration [vote_none | vote_all | vote_random | vote_recommended] ",
              "default_value" : "vote_recommended"
            }
         ],
         "prerequisites" : ["wallet_open"]
      },
	  {
         "method_name" : "wallet_scan_contracts",
         "description" : "scan to get all the contracts",
         "return_type" : "void",
         "parameters"  : [
         ],
         "prerequisites" : ["wallet_unlocked"]
      }	
    ]
}
